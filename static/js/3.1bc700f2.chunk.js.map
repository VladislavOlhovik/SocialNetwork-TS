{"version":3,"sources":["hoc/WithAuthRedirect.tsx","components/Chat/Chat.module.css","components/Chat/Chat.tsx"],"names":["mapStateToProps","state","isAuth","auth","mapDispatchToProps","dispatch","WithAuthRedirect","Component","RedirectComponent","this","props","to","React","connect","module","exports","messagesBlockRef","useRef","useState","message","setMessage","messages","setMessages","socket","setSocket","userID","useSelector","id","useEffect","webSocket","WebSocket","close","onmessage","event","JSON","parse","data","current","scrollTo","scrollHeight","className","s","header","ref","map","m","i","key","wrapper","userId","myMessage","src","photo","userPhoto","alt","mySpeechbubble","speechbubble","name","userName","inputss","value","onChange","e","currentTarget","disabled","onClick","trim","send"],"mappings":"8MAMMA,EAAkB,SAACC,GACrB,MAAM,CACFC,OAAQD,EAAME,KAAKD,SAGrBE,EAAqB,SAACC,GACxB,MAAM,IAKGC,EAAmB,SAAmBC,GAAsC,IAC/EC,EAD8E,uKAG5E,OAAIC,KAAKC,MAAMR,OACR,kBAACK,EAAcE,KAAKC,OADG,kBAAC,IAAD,CAAUC,GAAI,eAHgC,GACpDC,IAAML,WAMtC,OAAOM,YAAQb,EAAgBI,EAAxBS,CAA4CL,K,oBCvBvDM,EAAOC,QAAU,CAAC,QAAU,sBAAsB,KAAO,mBAAmB,QAAU,sBAAsB,aAAe,2BAA2B,KAAO,mBAAmB,OAAS,qBAAqB,QAAU,sBAAsB,SAAW,uBAAuB,UAAY,wBAAwB,eAAiB,+B,gIC4EtTT,uBA5DF,WACT,IAAMU,EAAmBC,iBAAuB,MADjC,EAEeC,mBAAS,IAFxB,mBAERC,EAFQ,KAECC,EAFD,OAGiBF,mBAAyB,IAH1C,mBAGRG,EAHQ,KAGEC,EAHF,OAIaJ,mBAAyB,MAJtC,mBAIRK,EAJQ,KAIAC,EAJA,KAKTC,EAASC,aAAqC,SAAAzB,GAAK,OAAEA,EAAME,KAAKwB,MAEtEC,qBAAU,WACN,IAAMC,EAAY,IAAIC,UAAU,gEAEhC,OADAN,EAAUK,GACH,WACHA,EAAUE,WAEf,IACCR,IACAA,EAAOS,UAAY,SAAUC,GAC3BX,EAAY,GAAD,mBAAKD,GAAL,YAAkBa,KAAKC,MAAMF,EAAMG,SAC9CpB,EAAiBqB,SACfrB,EAAiBqB,QAAQC,SACvB,EACAtB,EAAiBqB,QAAQE,gBAcnC,OACI,6BACI,wBAAIC,UAAWC,IAAEC,QAAjB,QACA,yBAAKF,UAAWC,IAAEpB,SAAUsB,IAAK3B,GAC5BK,EAASuB,KAAI,SAACC,EAAGC,GACd,OACI,yBAAKC,IAAKD,EAAGN,UAAS,UAAKC,IAAEO,QAAP,YAAkBvB,KAAUoB,EAAEI,OAAOR,IAAES,UAAU,KACnE,yBAAKC,IAAKN,EAAEO,MAAMP,EAAEO,MAAMC,IAAWC,IAAI,WACzC,yBAAKd,UAAS,UAAKf,KAAUoB,EAAEI,OAAOR,IAAEc,eAAed,IAAEe,eACrD,yBAAKhB,UAAWC,IAAEgB,MACd,6BAAMZ,EAAEa,WAEZ,yBAAKlB,UAAWC,IAAEtB,SAAU0B,EAAE1B,eAMlD,yBAAKqB,UAAWC,IAAEkB,SACd,2BAAOC,MAAOzC,EAAS0C,SA7BX,SAACC,GACrB1C,EAAW0C,EAAEC,cAAcH,UA6BnB,4BAAQI,SAAqB,OAAXzC,EAAiB0C,QA3B3B,WACO,KAAnB9C,EAAQ+C,SACR3C,EAAQ4C,KAAKhD,GACbC,EAAW,OAwBP","file":"static/js/3.1bc700f2.chunk.js","sourcesContent":["import React from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { Redirect } from 'react-router-dom'\r\nimport { DialogsActionType } from '../Redux/dialogs-reducer'\r\nimport { RootType } from '../Redux/redux-store'\r\n\r\nconst mapStateToProps = (state:RootType)=>{\r\n    return{\r\n        isAuth: state.auth.isAuth,\r\n    }\r\n}\r\nconst mapDispatchToProps = (dispatch:(action:DialogsActionType)=>void)=>{\r\n    return{}\r\n}\r\ntype WithAuthRedirectPropsType = {\r\n    isAuth:boolean\r\n}\r\nexport const WithAuthRedirect = <P extends object>(Component:React.ComponentType<P>) => {\r\n    class RedirectComponent extends React.Component<WithAuthRedirectPropsType> {\r\n        render(){\r\n            if(!this.props.isAuth) return <Redirect to={'/login'}/>\r\n            return <Component {...this.props as P}/>\r\n        }\r\n    }\r\n    return connect(mapStateToProps,mapDispatchToProps)(RedirectComponent) \r\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"Chat_wrapper__5ifol\",\"name\":\"Chat_name__n6CnP\",\"message\":\"Chat_message__3ul4T\",\"speechbubble\":\"Chat_speechbubble__10ZoT\",\"time\":\"Chat_time__1zkkV\",\"header\":\"Chat_header__2ReOX\",\"inputss\":\"Chat_inputss__3wuu0\",\"messages\":\"Chat_messages__2lvwl\",\"myMessage\":\"Chat_myMessage__2Cjqq\",\"mySpeechbubble\":\"Chat_mySpeechbubble__2wUCV\"};","import React, { ChangeEvent } from 'react'\r\nimport s from './Chat.module.css'\r\nimport { useEffect } from 'react'\r\nimport { useState } from 'react'\r\nimport { useRef } from 'react'\r\nimport userPhoto from '../../images/user.png'\r\nimport { useSelector } from 'react-redux'\r\nimport { RootType } from '../../Redux/redux-store'\r\nimport { WithAuthRedirect } from '../../hoc/WithAuthRedirect'\r\n\r\ntype MessagesType = {\r\n    userId: string\r\n    photo: string\r\n    userName: string\r\n    message: string\r\n}\r\n\r\nconst Chat = () => {\r\n    const messagesBlockRef = useRef<HTMLDivElement>(null)\r\n    const [message, setMessage] = useState('')\r\n    const [messages, setMessages] = useState<MessagesType[]>([])\r\n    const [socket, setSocket] = useState<WebSocket|null>(null)\r\n    const userID = useSelector<RootType, number | null>(state=>state.auth.id)\r\n\r\n    useEffect(() => {\r\n        const webSocket = new WebSocket('wss://social-network.samuraijs.com/handlers/chatHandler.ashx')\r\n        setSocket(webSocket)\r\n        return () => {\r\n            webSocket.close()\r\n        }\r\n    }, [])\r\n    if (socket) {\r\n        socket.onmessage = function (event) {\r\n          setMessages([...messages, ...JSON.parse(event.data)]);\r\n          messagesBlockRef.current &&\r\n            messagesBlockRef.current.scrollTo(\r\n              0,\r\n              messagesBlockRef.current.scrollHeight\r\n            );\r\n        };\r\n    }\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setMessage(e.currentTarget.value)\r\n    }\r\n    const sendMessage = () => {\r\n        if (message.trim() !== '') {\r\n            socket!.send(message)\r\n            setMessage('')\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <h3 className={s.header}>Chat</h3>\r\n            <div className={s.messages} ref={messagesBlockRef}>\r\n                {messages.map((m, i) => {\r\n                    return (\r\n                        <div key={i} className={`${s.wrapper} ${userID===+m.userId?s.myMessage:''}`}>\r\n                            <img src={m.photo?m.photo:userPhoto} alt=\"avatar\" />\r\n                            <div className={`${userID===+m.userId?s.mySpeechbubble:s.speechbubble}`}>\r\n                                <div className={s.name}>\r\n                                    <div>{m.userName}</div>\r\n                                </div>\r\n                                <div className={s.message}>{m.message}</div>\r\n                            </div>\r\n                        </div>\r\n                    )\r\n                })}\r\n            </div>\r\n            <div className={s.inputss}>\r\n                <input value={message} onChange={onChangeHandler} />\r\n                <button disabled={socket === null} onClick={sendMessage}>SEND</button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default WithAuthRedirect(Chat)"],"sourceRoot":""}
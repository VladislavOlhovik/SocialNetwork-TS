{"version":3,"sources":["components/Navbar/Navbar.module.css","components/Dialogs/Dialogs.module.css","components/Profile/MyPosts/MyPost.module.css","components/Header/Header.module.css","components/Profile/MyPosts/Post/Post.module.css","components/Profile/ProfileInfo/ProfileInfo.module.css","serviceWorker.ts","components/Header/Header.tsx","components/Navbar/Nav.tsx","components/Profile/MyPosts/Post/Post.tsx","Redux/profile-reducer.ts","components/Profile/MyPosts/MyPost.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","components/Profile/Profile.tsx","components/Dialogs/DialogItem/DialogItem.tsx","components/Dialogs/Message/Message.tsx","Redux/dialogs-reducer.ts","components/Dialogs/Dialogs.tsx","components/News/News.tsx","components/Music/Music.tsx","components/Setting/Setting.tsx","App.tsx","Redux/state.ts","index.tsx"],"names":["module","exports","Boolean","window","location","hostname","match","Header","className","s","header","src","Nav","nav","item","to","activeClassName","active","Post","props","alt","message","likeCounts","profileReducer","state","action","type","newPost","id","newPostText","postData","unshift","newText","MyPost","postsBlock","onChange","e","dispatch","currentTarget","value","postdata","onClick","posts","map","el","ProfileInfo","descriptionBlock","Profile","DialogItem","dialog","name","Message","dialogsReducer","newMassage","newMessage","messagesData","push","Dialogs","dialogs","dialogsItems","store","getState","dialogsPage","dialogsData","messages","placeholder","News","Music","Setting","App","path","render","profilePage","bind","component","_state","sidebar","this","rerenderEntireTree","subscribe","observer","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.07e504d2.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"Navbar_nav__3M06E\",\"item\":\"Navbar_item__3wg9Q\",\"active\":\"Navbar_active__2FGNY\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__T1sQ8\",\"dialogsItems\":\"Dialogs_dialogsItems__1cdap\",\"active\":\"Dialogs_active__2zRni\",\"messages\":\"Dialogs_messages__2znBk\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postsBlock\":\"MyPost_postsBlock__2qNik\",\"posts\":\"MyPost_posts__2-3ZU\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__FC034\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__1Kmi1\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"descriptionBlock\":\"ProfileInfo_descriptionBlock__8Ue3k\"};","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport s from './Header.module.css' ;\r\n\r\nexport const Header =()=>{\r\n    return(\r\n        <header className={s.header}>\r\n        <img src=\"https://i.pinimg.com/originals/33/b8/69/33b869f90619e81763dbf1fccc896d8d.jpg\"/>\r\n      </header>\r\n    )\r\n}","import React from 'react';\r\nimport s from './Navbar.module.css';\r\nimport { NavLink } from 'react-router-dom';\r\n\r\n\r\nexport const Nav = () => {\r\n  return (\r\n    <nav className={s.nav}>\r\n      <div className={s.item}>\r\n        <NavLink to='/profile' activeClassName={s.active}>Profile</NavLink>\r\n      </div>\r\n      <div className={s.item}>\r\n        <NavLink to='/dialogs' activeClassName={s.active}>Messages</NavLink>\r\n      </div>\r\n      <div className={s.item}>\r\n        <NavLink to='/news' activeClassName={s.active}>News</NavLink>\r\n      </div>\r\n      <div className={s.item}>\r\n        <NavLink to='/music' activeClassName={s.active}>Music</NavLink>\r\n      </div>\r\n      <div className={s.item}>\r\n        <NavLink to='/setting' activeClassName={s.active}>Setting</NavLink>\r\n      </div>\r\n    </nav>\r\n  )\r\n}","import React from 'react';\r\nimport s from './Post.module.css';\r\nimport { PostDataType } from '../../../../Redux/state';\r\n\r\nexport const Post: React.FC<PostDataType> = (props) =>{\r\n    return(\r\n      <div className={s.item}>\r\n      <img src=\"https://i.wpimg.pl/730x0/m.gadzetomania.pl/tumblr-kwh4eacbzu1qaptl6-a9d2590.jpg\" alt=\"\"/>\r\n      {props.message}\r\n      <div>\r\n        <span>like</span> {props.likeCounts}\r\n      </div>\r\n      </div>\r\n    )\r\n}\r\n// export type PostType={\r\n//   message: string\r\n//   likeCounts:number\r\n//   id?:number\r\n// }\r\n\r\n","import { ActionTypes, PostDataType, ProfilePageType } from \"./state\"\r\n\r\nconst profileReducer=(state:ProfilePageType,action:ActionTypes)=>{\r\n    switch(action.type){\r\n        case 'ADD-POST':\r\n            const newPost:PostDataType={\r\n                id:5,\r\n                message:state.newPostText,\r\n                likeCounts:0    \r\n            }\r\n            state.postData.unshift(newPost)\r\n            state.newPostText=''\r\n            return state\r\n        case 'UPDATE-NEW-POST-TEXT':\r\n            state.newPostText=action.newText\r\n            return state\r\n        default:\r\n            return state\r\n    }\r\n}\r\nexport const addPostActionCreator = (newText:string) => ({ type: 'ADD-POST',newText: newText });\r\nexport const updateNewPostTextActionCreator = (newText:string) => ({\r\n  type: 'UPDATE-NEW-POST-TEXT',\r\n  newText: newText\r\n});\r\nexport default profileReducer","import React, { ChangeEvent } from 'react';\r\nimport s from './MyPost.module.css';\r\nimport { Post } from './Post/Post';\r\nimport { addPostActionCreator, updateNewPostTextActionCreator } from '../../../Redux/profile-reducer';\r\nimport { ActionTypes, ProfilePageType } from '../../../Redux/state';\r\n\r\ntype myPostPropsType={\r\n  postdata:ProfilePageType\r\n  dispatch:(action:ActionTypes)=>void\r\n}\r\n\r\nexport const MyPost = (props:myPostPropsType) => {\r\n  const addPost=()=>{\r\n    props.dispatch(addPostActionCreator(''))\r\n  }\r\n  const onPostChange=(e:ChangeEvent<HTMLTextAreaElement>)=>{\r\n      props.dispatch(updateNewPostTextActionCreator(e.currentTarget.value))\r\n}\r\n   return (\r\n    <div className={s.postsBlock}>\r\n      <h3>My post</h3>\r\n      <div>\r\n        <div>\r\n          <textarea onChange={onPostChange} value={props.postdata.newPostText}></textarea>\r\n        </div>\r\n        <div>\r\n          <button onClick={addPost}>Add post</button>\r\n        </div>\r\n      </div>\r\n      <div className={s.posts}>\r\n        {props.postdata.postData.map(el=><Post message={el.message} likeCounts={el.likeCounts} />)}\r\n      </div>\r\n    </div >\r\n  )\r\n}","import React from 'react';\r\nimport s from './ProfileInfo.module.css';\r\n\r\n\r\nexport const ProfileInfo = () => {\r\n  return (\r\n    <div>\r\n      <div>\r\n        <img src=\"https://gadgetmedics.com/wp-content/uploads/2020/01/illustration-geiranger.jpg\" />\r\n      </div>\r\n      <div className={s.descriptionBlock}>\r\n        ava+description\r\n      </div>\r\n    </div>\r\n  )\r\n}","import React from 'react';\r\nimport s from './Profile.module.css';\r\nimport { MyPost } from './MyPosts/MyPost';\r\nimport { ProfileInfo} from './ProfileInfo/ProfileInfo';\r\nimport { ActionTypes, ProfilePageType } from '../../Redux/state';\r\ntype profilePropsType={\r\n  state:ProfilePageType\r\n  dispatch:(action:ActionTypes)=>void\r\n}\r\n\r\nexport const Profile = (props:profilePropsType) =>{ \r\n    return(\r\n        <div>\r\n          <ProfileInfo/>\r\n          <MyPost postdata={props.state} dispatch={props.dispatch}/>\r\n      </div>\r\n    )\r\n}","import React from 'react';\r\nimport s from './../Dialogs.module.css';\r\nimport { NavLink } from 'react-router-dom';\r\nimport { DialogsDataType } from '../../../Redux/state';\r\n\r\n// type PropsTypeDialogs={\r\n//     name:string\r\n//     id:number \r\n// }\r\nconst DialogItem = (props:DialogsDataType) => {\r\n    return (\r\n        <div className={s.dialog}>\r\n            <NavLink to={'/dialogs/' + props.id}>{props.name}</NavLink>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default DialogItem","import React from 'react';\r\nimport s from './../Dialogs.module.css';\r\nimport { MessagesDataType } from '../../../Redux/state';\r\n\r\n\r\nconst Message = (props:MessagesDataType) => {\r\n    return (\r\n        <div className={s.message}>{props.message}</div>\r\n    )\r\n}\r\n\r\nexport default Message","import { ActionTypes, DialogsPageType } from \"./state\"\r\n\r\nconst dialogsReducer=(state:DialogsPageType,action:ActionTypes)=>{\r\n    switch(action.type){\r\n        case 'ADD-MESSAGE':\r\n            const newMassage={id:6, message:state.newMessage}\r\n            state.messagesData.push(newMassage)\r\n            state.newMessage=''\r\n            return state\r\n        case 'UPDATE-NEW-MESSAGE-TEXT':\r\n            state.newMessage=action.newText\r\n            return state\r\n        default:\r\n            return state\r\n    }\r\n}\r\nexport const addMessageActionCreator = (newText:string) => ({ type: 'ADD-MESSAGE',newText: newText });\r\nexport const updateNewMessageActionCreator = (newText:string) => ({\r\n  type: 'UPDATE-NEW-MESSAGE-TEXT',\r\n  newText: newText\r\n});\r\nexport default dialogsReducer","import React, { ChangeEvent } from 'react';\r\nimport s from './Dialogs.module.css';\r\nimport DialogItem from './DialogItem/DialogItem';\r\nimport Message from './Message/Message';\r\nimport { addMessageActionCreator, updateNewMessageActionCreator } from '../../Redux/dialogs-reducer';\r\nimport { StoreType } from '../../Redux/state';\r\ntype dialogsPropsType={\r\n    store: StoreType\r\n}\r\nconst Dialogs = (props:dialogsPropsType) => {\r\n    const addMessage=()=>{\r\n        props.store.dispatch(addMessageActionCreator(''))\r\n    }\r\n    const onMessageChange=(e:ChangeEvent<HTMLTextAreaElement>)=>{\r\n        props.store.dispatch(updateNewMessageActionCreator(e.currentTarget.value))\r\n    }\r\n    return (\r\n        <div className={s.dialogs}>\r\n            <div className={s.dialogsItems}>\r\n                {props.store.getState().dialogsPage.dialogsData.map(el=><DialogItem name={el.name} id={el.id}/>)}\r\n            </div>\r\n            <div className={s.messages}>\r\n                {props.store.getState().dialogsPage.messagesData.map(el=><Message message={el.message}/>)}\r\n                <textarea  onChange={onMessageChange} placeholder='Enter your message' value={props.store.getState().dialogsPage.newMessage}></textarea>\r\n                <button onClick={addMessage}>sent</button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Dialogs","import React from 'react';\r\n\r\nconst News=()=>{\r\n    return(\r\n        <div>\r\n            News\r\n        </div>        \r\n    )\r\n}\r\n\r\nexport default News","import React from 'react';\r\n\r\nconst Music=()=>{\r\n    return(\r\n        <div>\r\n            Music\r\n        </div>        \r\n    )\r\n}\r\n\r\nexport default Music","import React from 'react';\r\n\r\nconst Setting=()=>{\r\n    return(\r\n        <div>\r\n            Setting\r\n        </div>        \r\n    )\r\n}\r\n\r\nexport default Setting","import React from 'react';\r\nimport './App.css';\r\nimport { Header } from './components/Header/Header';\r\nimport { Nav } from './components/Navbar/Nav';\r\nimport { Profile } from './components/Profile/Profile';\r\nimport { BrowserRouter, Route } from 'react-router-dom';\r\nimport Dialogs from './components/Dialogs/Dialogs';\r\nimport News from './components/News/News';\r\nimport Music from './components/Music/Music';\r\nimport Setting from './components/Setting/Setting';\r\nimport { StoreType } from './Redux/state';\r\n\r\ntype appPropsType={\r\n  store: StoreType\r\n}\r\n\r\n\r\nconst App = (props:appPropsType) => {\r\n  return (\r\n    <BrowserRouter>\r\n      <div className='app-wrapper'>\r\n        <Header />\r\n        <Nav />\r\n        <div className='app-wrapper-content'>\r\n          <Route path='/profile' render={()=><Profile \r\n                                               state={props.store.getState().profilePage}\r\n                                               dispatch={props.store.dispatch.bind(props.store)}/>} />\r\n          <Route path='/dialogs' render={()=><Dialogs store={props.store}/>} />\r\n          <Route path='/news' component={News} />\r\n          <Route path='/music' component={Music} />\r\n          <Route path='/setting' component={Setting} />\r\n        </div>\r\n      </div>\r\n    </BrowserRouter>\r\n  );\r\n}\r\n\r\n\r\nexport default App;\r\n","import dialogsReducer, { addMessageActionCreator, updateNewMessageActionCreator } from \"./dialogs-reducer\"\r\nimport profileReducer, { addPostActionCreator, updateNewPostTextActionCreator } from \"./profile-reducer\"\r\n\r\nexport type MessagesDataType = {\r\n    id?: number\r\n    message: string\r\n}\r\nexport type DialogsDataType = {\r\n    id: number\r\n    name: string\r\n}\r\nexport type PostDataType = {\r\n    id?: number\r\n    message: string\r\n    likeCounts: number\r\n}\r\nexport type DialogsPageType = {\r\n    dialogsData: Array<DialogsDataType>\r\n    messagesData: Array<MessagesDataType>\r\n    newMessage:string\r\n}\r\nexport type ProfilePageType = {\r\n    newPostText:string\r\n    postData: Array<PostDataType>\r\n}\r\nexport type RootStateType = {\r\n    profilePage: ProfilePageType\r\n    dialogsPage: DialogsPageType\r\n    sidebar?: SidebarType\r\n}\r\nexport type SidebarType={}\r\nexport type ActionTypes = ReturnType<typeof addMessageActionCreator> |\r\nReturnType<typeof updateNewMessageActionCreator>|ReturnType<typeof addPostActionCreator>|\r\nReturnType<typeof updateNewPostTextActionCreator>\r\nexport type StoreType={\r\n    _state:RootStateType\r\n    getState:()=>RootStateType\r\n    rerenderEntireTree:()=>void\r\n    subscribe:(observer:()=>void)=>void\r\n    dispatch:(action:ActionTypes)=>void\r\n}\r\n\r\nlet store:StoreType ={\r\n    _state: {\r\n        profilePage: {\r\n            newPostText:'Hello',\r\n            postData: [\r\n                { id: 1, message: 'Hi, how are you?', likeCounts: 12 },\r\n                { id: 2, message: \"It's my first post\", likeCounts: 11 },\r\n            ]\r\n        },\r\n        dialogsPage: {\r\n            dialogsData: [\r\n                { id: 1, name: 'Dimych' },\r\n                { id: 2, name: 'Andrey' },\r\n                { id: 3, name: 'Sveta' },\r\n                { id: 4, name: 'Sasha' },\r\n                { id: 5, name: 'Viktor' },\r\n                { id: 6, name: 'Valera' },\r\n            ],\r\n            newMessage:'',\r\n            messagesData: [\r\n                { id: 1, message: 'Hi' },\r\n                { id: 2, message: 'How is your it-kamasutra' },\r\n                { id: 3, message: 'Yo' }\r\n            ]\r\n        },\r\n        sidebar: {}\r\n    },\r\n    getState() {\r\n        return this._state\r\n    },\r\n    rerenderEntireTree() {},  \r\n    subscribe(observer) {\r\n        this.rerenderEntireTree=observer\r\n    },\r\n    dispatch(action){\r\n        this._state.dialogsPage=dialogsReducer(this._state.dialogsPage,action)\r\n        this._state.profilePage=profileReducer(this._state.profilePage,action)\r\n\r\n        this.rerenderEntireTree()\r\n    }\r\n}\r\n\r\nexport default store","import * as serviceWorker from './serviceWorker';\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport store from './Redux/state';\r\n\r\nconst rerenderEntireTree=()=>{\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App store={store} />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);}\r\n\r\nrerenderEntireTree()\r\nstore.subscribe(rerenderEntireTree)\r\n\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}